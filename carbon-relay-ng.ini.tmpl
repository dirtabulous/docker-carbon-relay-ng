instance = "default"

max_procs = 2

listen_addr = "0.0.0.0:2003"
pickle_addr = "0.0.0.0:2013"
admin_addr = "0.0.0.0:2004"
http_addr = "0.0.0.0:8081"
spool_dir = "/var/spool/carbon-relay-ng"
pid_file = "/var/run/carbon-relay-ng.pid"
#one of critical error warning notice info debug
log_level = "notice"
# How long to keep track of invalid metrics seen
# Useful time units are "s", "m", "h"
bad_metrics_max_age = "24h"
# Metric name validation strictness for legacy metrics. Valid values are:
# strict - Block anything that can upset graphite: valid characters are [A-Za-z0-9_-.]; consecutive dots are not allowed
# medium - Valid characters are ASCII; no embedded NULLs
# none   - No validation is performed
validation_level_legacy = "medium"
# Metric validation for carbon2.0 (metrics2.0) metrics.
# Metrics that contain = or _is_ are assumed carbon2.0.
# Valid values are:
# medium - checks for unit and mtype tag, presence of another tag, and constency (use = or _is_, not both)
# none   - No validation is performed
validation_level_m20 = "medium"

# you can also validate that each series has increasing timestamps
validate_order = false

# put init commands here, in the same format as you'd use for the telnet interface
# here's some examples:
init = [
     # a plain carbon route that sends all data to the specified carbon (graphite) server (note the double space)
     #'addRoute sendAllMatch carbon-default  your-graphite-server:2003 spool=true pickle=false',

     # example route for https://grafana.com/cloud/metrics (note the double space)
     'addRoute grafanaNet grafanaNet  {{ env "GRAFANA_METRIC_URL" }} {{ env "GRAFANA_API_KEY" }} /conf/storage-schemas.conf'

     # ignore hosts that don't set their hostname properly via prefix match
     #'addBlack prefix collectd.localhost',

     # ignore foo.<anything>.cpu.... via regex match
     #'addBlack regex ^foo\..*\.cpu+',

     # aggregate timer metrics with sums
     #'addAgg sum ^stats\.timers\.(app|proxy|static)[0-9]+\.requests\.(.*) stats.timers._sum_$1.requests.$2 10 20',

     # aggregate timer metrics with averages
     #'addAgg avg ^stats\.timers\.(app|proxy|static)[0-9]+\.requests\.(.*) stats.timers._avg_$1.requests.$2 5 10',

     # all metrics with '=' in them are metrics2.0, send to carbon-tagger servic (note the double space)
     #'addRoute sendAllMatch carbon-tagger sub==  127.0.0.1:2006',

     # send to the first carbon destination that matches the metric (note the double spaces between destinations)
     #'addRoute sendFirstMatch analytics regex=(Err/s|wait_time|logger)  graphite.prod:2003 prefix=prod. spool=true pickle=true  graphite.staging:2003 prefix=staging. spool=true pickle=true'
]

# consume metrics via AMQP
[amqp]
amqp_enabled = false
amqp_host = "localhost"
amqp_port = 5672
amqp_user = "guest"
amqp_password = "guest"
amqp_vhost = "/graphite"
amqp_exchange = "metrics"

[instrumentation]
# in addition to serving internal metrics via expvar, you can send them to graphite/carbon
# IMPORTANT: setting this to "" will disable flushing, and metrics will pile up and lead to OOM
# see https://github.com/graphite-ng/carbon-relay-ng/issues/50
# so for now you MUST send them somewhere. sorry.
# (Also, the interval here must correspond to your setting in storage-schemas.conf if you use grafana hosted metrics)
graphite_addr = "localhost:2003"
graphite_interval = 60000  # in ms
